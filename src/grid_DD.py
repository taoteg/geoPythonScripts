"""
Python script to create a grid basedon bounding box extents in decimanl degrees.
"""

########################
# Module Imports.
########################

import sys
import argparse
import math
# import urllib.request
# import shapefile as shp
# from pyproj import Proj, transform


########################
# Input Parameters
########################

helpDescription = "This script requires 7 arguments: minLong, minLat, maxLong, maxLat, cellWidth, cellHeight, output file basename. \n"
helpDescription += "The minX, minY, maxX and maxY should be in DD (decimal degrees). \n"
helpDescription += "The cellWidth and cellHeight should be in meters. \n"
helpDescription += "The output file name should be a single string (underscores are okay). \n"

parser = argparse.ArgumentParser(description=helpDescription, usage='use "%(prog)s --help" for more information', formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("minLong", help="The minimum Longitude (N/S or X) for the coordinate bounding box in DD (decimal degrees).", type=int)
parser.add_argument("minLat", help="The minimum Latitude (E/W or Y) for the coordinate bounding box in DD (decimal degrees).", type=int)
parser.add_argument("maxLong", help="The maximum Longitude (N/S or X) for the coordinate bounding box in DD (decimal degrees).", type=int)
parser.add_argument("maxLat", help="The maximum Latitude (E/W or Y) for the coordinate bounding box in DD (decimal degrees).", type=int)
parser.add_argument("cellWidth", help="The cell width to create in meters.", type=int)
parser.add_argument("cellHeight", help="The cell height to create in meters.", type=int)
parser.add_argument("outputFilename", help="The base name of the output file(s) generated by the script.")
args = parser.parse_args()

if len(sys.argv) != 8:    # 8 to include sys.argv[0].
    print("The script generateEmptyGrid.py requires 6 parameters: minx, miny, maxx, maxy, cell size (in meters), output file name.")
    print("You passed in the following argumanets: ")
    for x in sys.argv:
        print("Argument: ", x)
    print("Exiting script.")
    sys.exit(1)

########################
# Module variables.
########################

scriptName = sys.argv[0]
minLat = float(sys.argv[1])
minLong = float(sys.argv[2])
maxLat = float(sys.argv[3])
maxLong = float(sys.argv[4])
cellWidth = int(sys.argv[5])
cellHeight = int(sys.argv[6])
fileBaseName = sys.argv[7]

parameters = [scriptName, minLat, minLong, maxLat, maxLong, cellWidth, cellHeight, fileBaseName]

# Log out parameter values for testing.
"""
for p in parameters:
    print('---------------')
    print('Argument: ', p)
    print('Argument Type: ', type(p))
"""

########################
# Module Methods.
########################


# Convert DMS to DD.
def dd2dms(longitude, latitude):
    # math.modf() splits whole number and decimal into tuple
    # eg 53.3478 becomes (0.3478, 53)
    split_degx = math.modf(longitude)

    # the whole number [index 1] is the degrees
    degrees_x = int(split_degx[1])

    # multiply the decimal part by 60: 0.3478 * 60 = 20.868
    # split the whole number part of the total as the minutes: 20
    # abs() absoulte value - no negative
    minutes_x = abs(int(math.modf(split_degx[0] * 60)[1]))

    # multiply the decimal part of the split above by 60 to get the seconds
    # 0.868 x 60 = 52.08, round excess decimal places to 2 places
    # abs() absoulte value - no negative
    seconds_x = abs(round(math.modf(split_degx[0] * 60)[0] * 60, 2))

    # repeat for latitude
    split_degy = math.modf(latitude)
    degrees_y = int(split_degy[1])
    minutes_y = abs(int(math.modf(split_degy[0] * 60)[1]))
    seconds_y = abs(round(math.modf(split_degy[0] * 60)[0] * 60, 2))

    # account for E/W & N/S
    if degrees_x < 0:
        EorW = "W"
    else:
        EorW = "E"

    if degrees_y < 0:
        NorS = "S"
    else:
        NorS = "N"

    # abs() remove negative from degrees, was only needed for if-else above
    print("\t" + str(abs(degrees_x)) + u"\u00b0 " + str(minutes_x) + "' " + str(seconds_x) + "\" " + EorW)
    print("\t" + str(abs(degrees_y)) + u"\u00b0 " + str(minutes_y) + "' " + str(seconds_y) + "\" " + NorS)


# Convert DD to DMS.    # Not Working. Not really necessary.
"""
def latDD(x):   # x = latitude or longitude.
    D = int(x[1:3])
    M = int(x[3:5])
    S = float(x[5:])
    DD = D + float(M)/60 + float(S)/3600
    return DD
"""

########################
# Module Method Testing.
########################

# Test dd2dms()
"""
coords = [["Dublin", -6.2597, 53.3478],["Paris", 2.3508, 48.8567],["Sydney", 151.2094, -33.8650],["Ft.Worth", -97.546649, 32.550058],["Dallas", -97.034774, 32.987978]]

for city,x,y in coords:
    print(city + ":")
    dd2dms(x, y)
"""

# Expected Results:
# Dublin:       6° 15' 34.92" W, 	53° 20' 52.08" N
# Paris: 	    2° 21' 2.88" E, 	48° 51' 24.12" N
# Sydney:       151° 12' 33.84" E,  33° 51' 54.0" S
# Ft.Worth:     97° 32' 47.94" W,   32° 33' 0.21" N
# Dallas:       97° 2' 5.19" W,     32° 59' 16.72" N

########################
# Module Logic.
########################

print('Starting ', scriptName)
